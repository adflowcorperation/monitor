RULE Servlet load time rule
CLASS ^javax.servlet.http.HttpServlet
METHOD service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
HELPER kr.co.adflow.byteman.JdbcTracerHelper
AT ENTRY
IF true
	DO traceln("javax.servlet.http.HttpServlet rule  of thread ID..................."),
	getThreadId($1)
ENDRULE




RULE Connection leak trace getConnection rule
CLASS ^java.sql.DriverManager
METHOD getConnection
HELPER kr.co.adflow.byteman.JdbcTracerHelper
AT ENTRY
	IF  true
  DO	traceln("Connection leak trace getConnection rule  of thread ID..................."),
  		traceln("traceThread !!!!!!!!!!!!!!!!!!! ::"+ Thread.currentThread().getName()),
		traceln("traceThread !!!!!!!!!!!!!!!!!!! :: "+ Thread.currentThread().getId()),
    	registerOpenedConnection()
#		test($!)
ENDRULE

RULE exception when connectting
CLASS ^java.sql.SQLException
METHOD <init>
AT ENTRY
IF TRUE
	DO  traceln(" this is exception."),
		traceln("traceThread !!!!!!!!!!!!!!!!!!! ::"+ Thread.currentThread().getName()),
		traceln("traceThread !!!!!!!!!!!!!!!!!!! :: "+ Thread.currentThread().getId())
ENDRULE

RULE Connection  close Rule
INTERFACE ^java.sql.Connection
METHOD close
HELPER kr.co.adflow.byteman.JdbcTracerHelper
AT ENTRY
BIND connection:Connection=$0
IF TRUE
	DO  traceln("ConnectionconnectionTrackerHelper close rule of thread ID..................."),
		traceln("traceThread !!!!!!!!!!!!!!!!!!! ::"+ Thread.currentThread().getName()),
		traceln("traceThread !!!!!!!!!!!!!!!!!!! :: "+ Thread.currentThread().getId()),	
		releaseConnection(connection)
ENDRULE


RULE Statement getQuery Rule
INTERFACE ^java.sql.Statement
METHOD executeQuery(java.lang.String)
HELPER kr.co.adflow.byteman.JdbcTracerHelper
AT ENTRY
IF true
	DO  executeQueryByteman($1)
ENDRULE



RULE  PreparedStatement getQuery Rule
INTERFACE ^java.sql.Connection
METHOD prepareStatement(java.lang.String)
HELPER kr.co.adflow.byteman.JdbcTracerHelper
AT ENTRY
IF true
	DO  executeQueryByteman($1)
ENDRULE
